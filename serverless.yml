service: certopedia

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'prod'}
  memorySize: 512
  timeout: 30
  
  environment:
    STAGE: ${self:provider.stage}
    NODE_ENV: production
    DOMAIN_NAME: ${env:DOMAIN_NAME, 'cert.danieloo.com'}
  
  # IAM Role Permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::certopedia-assets/*"

  # API Gateway Configuration
  httpApi:
    cors:
      allowedOrigins:
        - https://cert.danieloo.com
        - https://www.cert.danieloo.com
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      maxAge: 86400

functions:
  app:
    handler: lambda/handler.handler
    description: CERTopedia main application handler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: GET
    
  api:
    handler: lambda/api.handler
    description: CERTopedia API endpoints
    events:
      - httpApi:
          path: /api/{proxy+}
          method: ANY
    environment:
      API_VERSION: '1.0'

  healthcheck:
    handler: lambda/healthcheck.handler
    description: Health check endpoint
    events:
      - httpApi:
          path: /health
          method: GET
    timeout: 10

resources:
  Resources:
    # S3 Bucket for static assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: certopedia-assets-${self:provider.stage}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: 
                - https://cert.danieloo.com
                - https://www.cert.danieloo.com
              MaxAge: 3600

    # S3 Bucket Policy
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AssetsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: !Sub "${AssetsBucket}/*"

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - cert.danieloo.com
          DefaultCacheBehavior:
            TargetOriginId: ApiGateway
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers: 
                - Authorization
                - CloudFront-Forwarded-Proto
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
          
          CacheBehaviors:
            - PathPattern: "/assets/*"
              TargetOriginId: S3Assets
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD]
              CachedMethods: [GET, HEAD]
              Compress: true
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              MinTTL: 86400
              DefaultTTL: 86400
              MaxTTL: 31536000
            
            - PathPattern: "/api/*"
              TargetOriginId: ApiGateway
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              CachedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: true
                Headers: ['*']
              MinTTL: 0
              DefaultTTL: 0
              MaxTTL: 0

          Origins:
            - Id: ApiGateway
              DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols: [TLSv1.2]
            
            - Id: S3Assets
              DomainName: !GetAtt AssetsBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

          ViewerCertificate:
            AcmCertificateArn: ${env:CERTIFICATE_ARN}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021

          Enabled: true
          HttpVersion: http2
          Comment: CERTopedia CloudFront Distribution
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 300
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 300

    # CloudFront Origin Access Identity
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for CERTopedia S3 bucket

    # Route 53 DNS Record
    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${env:ROUTE53_HOSTED_ZONE_ID}
        Name: cert.danieloo.com
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront HostedZoneId

plugins:
  - serverless-offline
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  # S3 Sync Configuration
  s3Sync:
    - bucketName: certopedia-assets-${self:provider.stage}
      localDir: dist
      acl: public-read
      followSymlinks: true
      deleteRemoved: true
      params:
        - "*.html":
            CacheControl: 'max-age=0, no-cache, no-store, must-revalidate'
        - "*.js":
            CacheControl: 'max-age=31536000, immutable'
        - "*.css":
            CacheControl: 'max-age=31536000, immutable'
        - "*.json":
            CacheControl: 'max-age=3600'
            ContentType: 'application/json'

  # CloudFront Invalidation
  cloudfrontInvalidate:
    - distributionIdKey: CloudFrontDistributionId
      items:
        - "/*"

package:
  patterns:
    - '!node_modules/**'
    - '!.github/**'
    - '!tests/**'
    - '!*.md'
    - 'lambda/**'
    - 'dist/**'
    - 'package.json'