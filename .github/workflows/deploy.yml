name: Deploy CERTopedia to AWS Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOMAIN: 'cert.danieloo.com'

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Validate JSON data
      run: npm run validate

    - name: Check code formatting
      run: npm run lint

    - name: Security audit
      run: npm audit --audit-level moderate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Optimize assets
      run: npm run optimize

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install Serverless Framework
      run: npm install -g serverless

    - name: Deploy to AWS Lambda
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        DOMAIN_NAME: ${{ env.DOMAIN }}
        CERTIFICATE_ARN: ${{ secrets.SSL_CERTIFICATE_ARN }}
      run: |
        serverless deploy --verbose
        echo "Deployment completed successfully!"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against ${{ env.DOMAIN }}"
        npm run smoke-test

    - name: Update deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful to https://${{ env.DOMAIN }}"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Run Lighthouse CI
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      run: |
        lhci autorun --upload.target=temporary-public-storage --collect.url=https://${{ env.DOMAIN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, performance-test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ CERTopedia deployed successfully!"
        echo "üåê Available at: https://${{ env.DOMAIN }}"
        echo "üìä Performance tests completed"

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "üìù Check logs for details"
        exit 1